/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

class AppTest {

    //       Task 2 Tests - done by 22T4905
     @Test
    public void testTask2_removesFirstCharacter() {
        SimpleFunctions sf = new SimpleFunctions();
        List<String> input = Arrays.asList("Apple", "Banana", "Cat");
        List<String> expected = Arrays.asList("pple", "anana", "at");
        assertEquals(expected, sf.Task2(input));
    }

    @Test
    public void testTask2_ignoresEmptyStrings() {
        SimpleFunctions sf = new SimpleFunctions();
        List<String> input = Arrays.asList("", "A", "", "Dog");
        List<String> expected = Arrays.asList("", "og");
        assertEquals(expected, sf.Task2(input));
    }
// test for task3
    @Test
    public void testtask3parenthesis(){
        SimpleFunctions bracket = new SimpleFunctions();
        String input = "((()))";
        boolean answer = bracket.Task3(input);
        assertTrue(answer);

    }

    @Test
    public void testparenthesis () {
        SimpleFunctions bracket = new SimpleFunctions();
        String input  = "()))";
        boolean answer = bracket.Task3(input);
        assertFalse(answer);
        }

    @Test
    public void emptystring(){
        SimpleFunctions bracket = new SimpleFunctions();
        String input  = "";
        boolean answer = bracket.Task3(input);
        assertTrue(answer);
        }

    @Test
    public void testcorrectbracket() {
        SimpleFunctions bracket = new SimpleFunctions();
        String input = ")(";
        boolean answer = bracket.Task3(input);

        assertFalse(answer);


    }
    // test for task 4 

    @Test
    public void equalSizedList() {
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> a = Arrays.asList(1, 2, 3);
        List<Integer> b = Arrays.asList(4, 5, 6);
        List<Integer> expected = Arrays.asList(6, 10, 12); // 1×6, 2×5, 3×4
        assertEquals(expected, sf.Task4(a, b));
    }

    @Test
    public void equalSizedList2() {
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> a = Arrays.asList(2, 4);
        List<Integer> b = Arrays.asList(5, 7);
        List<Integer> expected = Arrays.asList(14, 20); // 2×7, 4×5
        assertEquals(expected, sf.Task4(a, b));
    }

    @Test
    public void notMatchingListSizes() {
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> a = Arrays.asList(1, 2, 3);
        List<Integer> b = Arrays.asList(4, 5);
        assertNull(sf.Task4(a, b));
    }

    @Test
    public void EmptyLists() {
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> a = Arrays.asList();
        List<Integer> b = Arrays.asList();
        List<Integer> expected = Arrays.asList(); // empty result
        assertEquals(expected, sf.Task4(a, b));
    }

    @Test
    public void oneElementLists() {
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> a = Arrays.asList(9);
        List<Integer> b = Arrays.asList(3);
        List<Integer> expected = Arrays.asList(27); // 9×3
        assertEquals(expected, sf.Task4(a, b));
    }

















    //      TASK6 TESTS      //
    @Test
    void testAlreadyMultiplesOf100() {
        // Test when the list contains only multiples of 100
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList(100, 200, 300);
        List<Integer> expected = Arrays.asList(100, 200, 300);
        assertEquals(expected, sf.Task6(input));
    }


    @Test
    void testNonMultiplesOf100() {
        // Test when the list contains numbers not multiples of 100
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList(101, 250, 399);
        List<Integer> expected = Arrays.asList(200, 300, 400);
        assertEquals(expected, sf.Task6(input));
    }

    @Test
    void testMixedList() {
        // Test when the list contains both multiples and non-multiples of 100
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList(100, 150, 299);
        List<Integer> expected = Arrays.asList(100, 200, 300);
        assertEquals(expected, sf.Task6(input));
    }

    @Test
    void testEmptyList() {
        // Test when the list is empty
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList();
        List<Integer> expected = Arrays.asList();
        assertEquals(expected, sf.Task6(input));
    }
// Task 5 Tests
     @Test
    void testSortedList() {
        // Test when the list is already sorted
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList(100, 200, 300);
        assertTrue(sf.Task5(input));
    }

    @Test
    void testUnsortedList() {
        // Test when the list is not sorted
        SimpleFunctions sf = new SimpleFunctions();
        List<Integer> input = Arrays.asList(300, 200, 100);
        assertFalse(sf.Task5(input));
    }

    //Task 1 tests


    public class Task1Tests {

        @Test
        public void testValidIndexes() {
            List<Integer> a = Arrays.asList(10, 20, 30, 40, 50);
            List<Integer> b = Arrays.asList(0, 2, 4);
            int result = new Task1().Task1(a, b);
            int expected = 10 + 30 + 50;
            assertEquals(expected, result);
        }
    
        @Test
        public void testInvalidIndexes() {
            List<Integer> a = Arrays.asList(5, 15, 25, 35);
            List<Integer> b = Arrays.asList(-1, 0, 2, 10);
            int result = new Task1().Task1(a, b);
            int expected = 5 + 25;
            assertEquals(expected, result);
        }
    }
}


